import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.control.Button;
import java.io.File;

import javafx.scene.control.Label;
import javafx.scene.control.ScrollPane;
import javafx.scene.control.Tab;
import javafx.scene.image.Image;
import javafx.scene.layout.Border;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.BorderStroke;
import javafx.scene.layout.BorderStrokeStyle;
import javafx.scene.layout.BorderWidths;
import javafx.scene.layout.CornerRadii;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.scene.layout.Priority;
import javafx.scene.layout.StackPane;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.paint.Paint;
import javafx.scene.shape.Rectangle;
import javafx.scene.text.Font;
import javafx.scene.text.FontPosture;

public class RecipeTab extends Tab
{
	private String workingDirectory;
	
	public RecipeTab(String higherWorkingDirectory)
	{
		workingDirectory = higherWorkingDirectory + "\\Recipes";
		
		setStandardView();
		System.out.println("new working directory is " + workingDirectory);
		File testDirectory = new File(workingDirectory);
		if(!testDirectory.exists()) 
			if(!testDirectory.mkdirs())System.out.println("Failed to make directory " + workingDirectory);
		
		this.setText("Recipes");
		this.setClosable(false);
	}
	private void setEditRecipeView()
	{
		
	}
	public void setStandardView()
	{
			BorderPane recipeLayoutPane = new BorderPane();
				Pane addRecipePane = new Pane();
				addRecipePane.setBorder(new Border(new BorderStroke(Color.BLACK, BorderStrokeStyle.SOLID, CornerRadii.EMPTY, new BorderWidths(2,0,0,0))));
					Button addRecipe = new Button("Add Recipe");
					addRecipe.setStyle("-fx-background-radius: 0");
					addRecipe.setLayoutY(5);
						ScrollPane recipeScrollPane = new ScrollPane();
							VBox recipeList = new VBox();
							recipeList.prefWidthProperty().bind(recipeScrollPane.widthProperty());
							refreshRecipeList(recipeList);
						recipeScrollPane.setContent(recipeList);
				addRecipePane.getChildren().add(addRecipe);
			recipeLayoutPane.setTop(addRecipePane);
			recipeLayoutPane.setCenter(recipeScrollPane);
		this.setContent(recipeLayoutPane);
	}
	private void refreshRecipeList(VBox recipeListRefresh)
	{
		File recipeDirectory = new File(workingDirectory);
		for (File sub : recipeDirectory.listFiles())
        {
	            HBox recipeBox = new HBox();
	        		String recipeName = sub.getName();
	            	Label recipeLabel = new Label(recipeName);
	            	recipeLabel.setFont(Font.font("Arial", FontPosture.REGULAR, 20));
	            		HBox recipeOptions = new HBox();
	            			Button editRecipeBt = new Button("edit");
	            			editRecipeBt.setStyle("-fx-background-radius: 0");
	            			Button deleteRecipeBt = new Button("X");
	            			deleteRecipeBt.setStyle("-fx-background-radius: 0;-fx-text-fill: Red");
	            		recipeOptions.setAlignment(Pos.CENTER_RIGHT);
	            		recipeOptions.getChildren().add(editRecipeBt);
	            		recipeOptions.getChildren().add(deleteRecipeBt);
	            recipeBox.getChildren().add(recipeLabel);
	            recipeBox.getChildren().add(recipeOptions);
	            HBox.setHgrow(recipeOptions, Priority.ALWAYS);
	            recipeBox.setPadding(new Insets(1,1,1,1));
	            recipeBox.prefWidthProperty().bind(recipeListRefresh.widthProperty());
	            recipeBox.setBorder(new Border(new BorderStroke(Color.BLACK, BorderStrokeStyle.SOLID, CornerRadii.EMPTY, new BorderWidths(2,2,2,2))));
	        recipeListRefresh.getChildren().add(recipeBox);
        }
	}
	
}
